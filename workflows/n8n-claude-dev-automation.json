{
  "name": "Claude Dev Automation",
  "nodes": [
    {
      "parameters": {
        "triggerOn": "file",
        "path": "C:\\Deployment\\claude-dev-automation\\task.yaml",
        "options": {}
      },
      "id": "193e4c2f-52e2-4439-9a07-5efd725fad94",
      "name": "File Trigger",
      "type": "n8n-nodes-base.localFileTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "fileSelector": "C:/Deployment/claude-dev-automation/task.yaml",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        192,
        0
      ],
      "id": "ee1e5888-403f-4196-96d9-6ca672eb6177",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "functionCode": "// Read file content from BINARY data (Read/Write Files returns binary)\nlet fileContent = '';\n\nconsole.log('=== Parse YAML Task Debug ===');\nconsole.log('Has binary:', !!$input.item.binary);\nconsole.log('Binary keys:', $input.item.binary ? Object.keys($input.item.binary) : 'none');\n\n// Read from binary.data (Read/Write Files stores file content here)\nif ($input.item.binary && $input.item.binary.data) {\n  const buffer = Buffer.from($input.item.binary.data.data, 'base64');\n  fileContent = buffer.toString('utf8');\n  console.log('File read from binary.data, length:', fileContent.length);\n} else {\n  throw new Error('No binary data found. Check if Read/Write Files node executed correctly.');\n}\n\nconsole.log('First 200 chars:', fileContent.substring(0, 200));\n\n// Parse YAML\nconst lines = fileContent.split('\\n');\nconst task = {\n  type: '',\n  project: '',\n  description: '',\n  priority: 'P2'\n};\n\nlet currentSection = '';\nlet descriptionLines = [];\n\nfor (const line of lines) {\n  const trimmed = line.trim();\n  \n  if (trimmed.startsWith('type:')) {\n    task.type = trimmed.replace('type:', '').trim();\n  } else if (trimmed.startsWith('project:')) {\n    task.project = trimmed.replace('project:', '').trim();\n  } else if (trimmed.startsWith('description:')) {\n    currentSection = 'description';\n    const desc = trimmed.replace('description:', '').trim();\n    if (desc && desc !== '|') {\n      descriptionLines.push(desc);\n    }\n  } else if (currentSection === 'description' && trimmed && !trimmed.startsWith('context:') && !trimmed.startsWith('requirements:')) {\n    descriptionLines.push(trimmed);\n  } else if (trimmed.startsWith('context:') || trimmed.startsWith('requirements:')) {\n    currentSection = '';\n  }\n}\n\n// Join description\ntask.description = descriptionLines.join(' ').trim();\n\n// Build full task string for context\nconst taskString = `${task.type}: ${task.description}`;\n\nconsole.log('Parsed successfully:');\nconsole.log('  Type:', task.type);\nconsole.log('  Project:', task.project);\nconsole.log('  Description length:', task.description.length);\nconsole.log('  Task string:', taskString);\n\nreturn {\n  json: {\n    task: taskString,\n    project: task.project,\n    priority: task.priority,\n    type: task.type,\n    description: task.description\n  }\n};"
      },
      "id": "719dfe50-924b-472c-b7f4-d2ad1ec00de2",
      "name": "Parse YAML Task",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        384,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:5000/build-context",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"project_name\": $json.project,\n  \"task_description\": $json.task\n} }}",
        "options": {}
      },
      "id": "35d40205-8f1a-4715-b46a-de38a45b10d9",
      "name": "Build Smart Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        608,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "Your x-api-key"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"model\": \"claude-sonnet-4-5-20250929\",\n  \"max_tokens\": 4096,\n  \"system\": \"⚠️ CRITICAL INSTRUCTIONS - STRICT COMPLIANCE REQUIRED ⚠️\\n\\n🔴 STOP! READ THE TASK DESCRIPTION TWICE BEFORE DOING ANYTHING! 🔴\\n\\nYOU MUST FOLLOW THE TASK DESCRIPTION LITERALLY. DO NOT ADD ANYTHING EXTRA.\\n\\nSTEP 1: Read the task description completely\\nSTEP 2: Identify the PRIMARY action requested (usually mentioned FIRST)\\nSTEP 3: Do ONLY that primary action - nothing else\\nSTEP 4: Ignore any urge to \\\"fix\\\" or \\\"improve\\\" other things you notice\\n\\n═══════════════════════════════════════════════════════════════\\n\\nRULE 1: DO ONLY WHAT IS EXPLICITLY ASKED\\n- If task says \\\"add comment\\\" → Add ONLY that comment\\n- If task says \\\"fix typo\\\" → Fix ONLY that typo\\n- If task says \\\"change variable X\\\" → Change ONLY variable X\\n- DO NOT add features, improvements, or \\\"helpful\\\" extras\\n\\nRULE 2: FOR MODIFY OPERATIONS\\n1. You will see the COMPLETE existing file content\\n2. Make THE EXACT change requested - nothing more, nothing less\\n3. PRESERVE everything else EXACTLY as it is:\\n   - Same imports (even if you think they should change)\\n   - Same variable names\\n   - Same function signatures\\n   - Same code style\\n   - Same comments\\n   - Same blank lines\\n   - EVERYTHING stays identical except the requested change\\n\\nRULE 3: THINGS YOU WILL NOTICE BUT MUST IGNORE\\n❌ Missing fields that \\\"should\\\" be there\\n❌ Outdated or deprecated syntax\\n❌ Inefficient code that could be optimized\\n❌ Missing error handling\\n❌ Incomplete features\\n❌ Bad naming conventions\\n❌ Missing documentation\\n❌ Code that doesn't follow best practices\\n\\n👉 SEE THESE PROBLEMS? GOOD. NOW IGNORE THEM.\\n👉 DO ONLY WHAT THE TASK EXPLICITLY ASKS FOR.\\n👉 IF TASK SAYS \\\"ADD COMMENT\\\" - ADD ONLY COMMENT.\\n👉 IF TASK SAYS \\\"FIX BUG\\\" - FIX ONLY THAT BUG.\\n\\nRULE 4: FORBIDDEN ACTIONS (unless explicitly requested)\\n❌ DO NOT add new features or settings\\n❌ DO NOT refactor or improve code\\n❌ DO NOT fix other bugs or issues\\n❌ DO NOT add type hints or docstrings\\n❌ DO NOT reorganize imports\\n❌ DO NOT add validation or error handling\\n❌ DO NOT \\\"help\\\" by adding related functionality\\n\\n═══════════════════════════════════════════════════════════════\\n\\n🎯 CRITICAL CHECKPOINT BEFORE YOU START:\\n\\n1. What is the PRIMARY action in the task? (Read first sentence)\\n2. Is it \\\"add comment\\\"? → Add ONLY that comment\\n3. Is it \\\"fix variable\\\"? → Fix ONLY that variable  \\n4. Is it \\\"create file\\\"? → Create ONLY that file\\n5. Did you notice other problems? → IGNORE THEM\\n6. Are you tempted to add something helpful? → DON'T\\n\\n═══════════════════════════════════════════════════════════════\\n\\nEXAMPLES - STUDY THESE CAREFULLY:\\n\\nEXAMPLE 1 - Add Comment at Top (MOST COMMON):\\n━━━━━━━━━━━━━━━━━━━━━━━━\\nTask: \\\"Add comment '# Version 1.0' at top of config.py\\\"\\n\\nYou see in the file content:\\n\\\"\\\"\\\"Configuration management module\\\"\\\"\\\"\\nfrom typing import Optional\\nclass Settings(BaseSettings):\\n    app_name: str = Field(default=\\\"MyApp\\\")\\n    # Missing: anthropic_api_key ← YOU NOTICE THIS BUT IGNORE IT!\\n\\nCORRECT OUTPUT:\\n# Version 1.0\\n\\\"\\\"\\\"Configuration management module\\\"\\\"\\\"\\nfrom typing import Optional\\nclass Settings(BaseSettings):\\n    app_name: str = Field(default=\\\"MyApp\\\")\\n    # STILL MISSING anthropic_api_key - AND THAT'S OK!\\n\\nWRONG OUTPUT (DO NOT DO THIS):\\n# Version 1.0\\n\\\"\\\"\\\"Configuration management module\\\"\\\"\\\"\\nfrom typing import Optional\\nclass Settings(BaseSettings):\\n    app_name: str = Field(default=\\\"MyApp\\\")\\n    anthropic_api_key: str = Field(...)  ← NO! Task didn't ask for this!\\n    claude_model: str = Field(...)  ← NO! Task didn't ask for this!\\n\\nWHY WRONG: Task said \\\"add comment\\\", not \\\"add comment AND fix missing fields\\\"\\n━━━━━━━━━━━━━━━━━━━━━━━━\\n\\nEXAMPLE 2 - Fix Variable:\\n━━━━━━━━━━━━━━━━━━━━━━━━\\nTask: \\\"Change debug default from True to False in config.py\\\"\\n\\nCORRECT OUTPUT:\\ndebug: bool = Field(default=False, description=\\\"Debug mode\\\")\\n... everything else EXACTLY the same ...\\n\\nWRONG OUTPUT (DO NOT DO THIS):\\ndebug: bool = Field(\\n    default=False,\\n    description=\\\"Debug mode - enhanced\\\"  ← Changed description\\n)\\nlog_level: str = Field(default=\\\"INFO\\\")  ← Added related setting\\n\\nWHY WRONG: Changed more than requested, added related features\\n━━━━━━━━━━━━━━━━━━━━━━━━\\n\\nEXAMPLE 3 - Add Function:\\n━━━━━━━━━━━━━━━━━━━━━━━━\\nTask: \\\"Add function validate_input() to utils.py\\\"\\n\\nCORRECT OUTPUT:\\n... existing code EXACTLY as it was ...\\n\\ndef validate_input():\\n    pass\\n\\nWRONG OUTPUT (DO NOT DO THIS):\\n... existing code with \\\"improvements\\\" ...\\n\\ndef validate_input():\\n    \\\"\\\"\\\"Validates user input.\\\"\\\"\\\"  ← Added docstring\\n    pass\\n\\ndef sanitize_input():  ← Added related function\\n    pass\\n\\nWHY WRONG: Added docstring and related functions not requested\\n━━━━━━━━━━━━━━━━━━━━━━━━\\n\\n═══════════════════════════════════════════════════════════════\\n\\nYOUR INSTRUCTIONS:\\n\\nFor CREATE operations:\\n- Create the new file as described\\n- Use appropriate structure\\n\\nFor MODIFY operations:\\n1. Read the existing file content from context\\n2. Identify THE EXACT change requested\\n3. Make ONLY that change\\n4. Keep 100% of other content identical\\n5. Output COMPLETE file with your single change\\n\\nOUTPUT FORMAT:\\nUse this XML format ONLY:\\n\\n<file_operations>\\n  <operation type=\\\"create\\\" path=\\\"filename.ext\\\">\\n    <content>\\nComplete file content here\\n    </content>\\n  </operation>\\n</file_operations>\\n\\nFor modify operations: use type=\\\"modify\\\"\\nOutput NOTHING before or after the XML tags.\\n\\n═══════════════════════════════════════════════════════════════\\n\\n🔴 FINAL REMINDER - READ THIS BEFORE EVERY RESPONSE: 🔴\\n\\nQ: What if I see the file is missing important fields?\\nA: IGNORE IT. Do only what task asks.\\n\\nQ: What if the code has bad practices?\\nA: IGNORE IT. Do only what task asks.\\n\\nQ: What if I could make the code better?\\nA: DON'T. Do only what task asks.\\n\\nQ: But wouldn't it be helpful to add related features?\\nA: NO. Task says \\\"add comment\\\" = add ONLY comment.\\n\\nQ: Should I fix the import while I'm there?\\nA: NO. Unless task explicitly says \\\"fix import\\\".\\n\\n✓ Read task TWICE\\n✓ Identify PRIMARY action (first thing mentioned)\\n✓ Do ONLY that action\\n✓ Preserve 100% of everything else\\n✗ No extras, no improvements, no \\\"being helpful\\\"\\n✗ Ignore problems you notice\\n✗ Resist urge to add related features\\n\\nSTRICT COMPLIANCE REQUIRED. FOLLOW THE TASK LITERALLY.\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": $json.context\n    }\n  ]\n} }}",
        "options": {}
      },
      "id": "15e5e808-c4b1-463c-9931-b4e22f8d6b69",
      "name": "Call Claude API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        832,
        0
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "JO0puAil67sWu6SS",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse Claude response and extract file operations\nconst response = $input.item.json;\n\n// Extract content text\nlet contentText = '';\nif (response.content && Array.isArray(response.content)) {\n  for (const block of response.content) {\n    if (block.type === 'text') {\n      contentText += block.text;\n    }\n  }\n}\n\n// Extract token usage\nconst usage = response.usage || {};\nconst tokenUsage = {\n  input_tokens: usage.input_tokens || 0,\n  output_tokens: usage.output_tokens || 0,\n  total_tokens: (usage.input_tokens || 0) + (usage.output_tokens || 0)\n};\n\n// Calculate cost (Claude Sonnet 4.5 pricing)\nconst inputCost = (tokenUsage.input_tokens / 1000000) * 3.0;\nconst outputCost = (tokenUsage.output_tokens / 1000000) * 15.0;\nconst totalCost = inputCost + outputCost;\n\n// Extract file operations from XML\nconsole.log('DEBUG: contentText length:', contentText.length);\nconsole.log('DEBUG: contentText preview:', contentText.substring(0, 500));\n\nconst fileOpsRegex = /<file_operations>([\\s\\S]*?)<\\/file_operations>/gi;\nconst operations = [];\n\nlet match;\nwhile ((match = fileOpsRegex.exec(contentText)) !== null) {\n  const xmlContent = match[1];\n  \n  // Parse individual operations\n  const opRegex = /<operation\\s+type=\"([^\"]+)\"\\s+path=\"([^\"]+)\">([\\s\\S]*?)<\\/operation>/gi;\n  \n  let opMatch;\n  while ((opMatch = opRegex.exec(xmlContent)) !== null) {\n    const type = opMatch[1];\n    const path = opMatch[2];\n    const fullContent = opMatch[3];\n    \n    // Extract content between <content> tags\n    const contentMatch = fullContent.match(/<content>([\\s\\S]*?)<\\/content>/i);\n    const content = contentMatch ? contentMatch[1].trim() : '';\n    \n    if (type && path) {\n      operations.push({\n        type: type,\n        path: path,\n        content: content\n      });\n    }\n  }\n}\n\nconsole.log(`Found ${operations.length} file operations`);\n\nreturn {\n  json: {\n    claude_response: contentText,\n    token_usage: tokenUsage,\n    cost_usd: totalCost,\n    cost_eur: totalCost * 1.10,\n    operations: operations,\n    operations_count: operations.length,\n    model: response.model || 'claude-sonnet-4-5-20250929'\n  }\n};"
      },
      "id": "89627cd8-d759-4227-b028-984b8d7fcc05",
      "name": "Parse File Operations",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:5000/execute-operations",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"project_name\": $('Parse YAML Task').item.json.project,\n  \"operations\": $json.operations\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        0
      ],
      "id": "80f56f6b-c061-4950-ac5a-5d67d171434b",
      "name": "Execute Operations"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:5000/verify-files",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"project_name\": $('Parse YAML Task').item.json.project,\n  \"file_results\": $json.file_results\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        0
      ],
      "id": "3c21829a-8bb5-483b-beb1-da4f4fef2334",
      "name": "Verify Files"
    },
    {
      "parameters": {
        "command": "=cd C:/Development/{{$node['Parse YAML Task'].json.project}} && git add . && git commit -m \"feat: automated task for {{$node['Parse YAML Task'].json.project}}\" && git status"
      },
      "id": "e9620f4f-cbdb-47bf-9133-118964366a46",
      "name": "Git Commit",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1616,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Generate clean response.md\nconst data = $node['Parse File Operations'].json;\nconst execResults = $node['Execute Operations'].json;\nconst yamlData = $node['Parse YAML Task'].json;\nconst now = new Date().toISOString().replace('T', ' ').substr(0, 19);\n\nlet markdown = `# Task Response\\n\\n`;\nmarkdown += `**Generated:** ${now}\\n\\n`;\n\n// Task Summary\nmarkdown += `## 📋 Task Summary\\n\\n`;\nmarkdown += `**Project:** ${yamlData.project}\\n\\n`;\nmarkdown += `**Task:** ${yamlData.task}\\n\\n`;\nmarkdown += `**Priority:** ${yamlData.priority}\\n\\n`;\n\n// File Operations Summary\nif (data.operations_count > 0) {\n  markdown += `## 📝 File Operations\\n\\n`;\n  markdown += `**Total operations:** ${data.operations_count}\\n`;\n  \n  if (execResults && execResults.file_results) {\n    const successCount = execResults.file_results.filter(r => r.success).length;\n    const failCount = execResults.file_results.filter(r => !r.success).length;\n    \n    markdown += `**Success:** ${successCount}\\n`;\n    markdown += `**Failed:** ${failCount}\\n\\n`;\n    \n    markdown += `**Created/Modified files:**\\n`;\n    for (const result of execResults.file_results) {\n      const status = result.success ? '✅' : '❌';\n      markdown += `- ${status} **${result.operation.toUpperCase()}**: \\`${result.path}\\`\\n`;\n      if (!result.success && result.error) {\n        markdown += `  - Error: ${result.error}\\n`;\n      }\n    }\n  }\n  markdown += `\\n`;\n} else {\n  markdown += `## 💬 Claude's Analysis\\n\\n`;\n  markdown += data.claude_response + `\\n\\n`;\n}\n\n// Token Usage\nmarkdown += `## 📊 Token Usage\\n\\n`;\nmarkdown += `- **Input tokens:** ${data.token_usage.input_tokens.toLocaleString()}\\n`;\nmarkdown += `- **Output tokens:** ${data.token_usage.output_tokens.toLocaleString()}\\n`;\nmarkdown += `- **Total tokens:** ${data.token_usage.total_tokens.toLocaleString()}\\n\\n`;\nmarkdown += `**Cost:** $${data.cost_usd.toFixed(4)} USD (€${data.cost_eur.toFixed(4)} EUR)\\n\\n`;\n\n// Financial Balance\nmarkdown += `💰 **Financial Balance:** \\n`;\nmarkdown += `   - This task cost: $${data.cost_usd.toFixed(4)}\\n`;\nmarkdown += `   - Zostatok: ~$2.50 USD\\n\\n`;\n\nmarkdown += `---\\n\\n`;\nmarkdown += `*Generated by Claude Dev Automation (n8n)*\\n`;\n\nreturn {\n  json: {\n    response_markdown: markdown\n  }\n};"
      },
      "id": "116592a2-1f17-420c-bac3-c36daaae8e02",
      "name": "Generate Clean Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1808,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:5000/save-response",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "markdown",
              "value": "={{ $json.response_markdown }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        0
      ],
      "id": "cee2b551-f2ac-4645-83d8-12b346f147c0",
      "name": "Save Response"
    }
  ],
  "pinData": {},
  "connections": {
    "File Trigger": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Parse YAML Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse YAML Task": {
      "main": [
        [
          {
            "node": "Build Smart Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Smart Context": {
      "main": [
        [
          {
            "node": "Call Claude API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude API": {
      "main": [
        [
          {
            "node": "Parse File Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse File Operations": {
      "main": [
        [
          {
            "node": "Execute Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Operations": {
      "main": [
        [
          {
            "node": "Verify Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Files": {
      "main": [
        [
          {
            "node": "Git Commit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git Commit": {
      "main": [
        [
          {
            "node": "Generate Clean Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Clean Response": {
      "main": [
        [
          {
            "node": "Save Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4d0c4b59-4faf-4a70-ae3a-303042c08ecf",
  "meta": {
    "instanceId": "c9efa060a1effb29a1cf6ca0778efa875664a185f8bfcd0e3a29c472e1befe8e"
  },
  "id": "uyX7mBiLZi5MfliA",
  "tags": []
}